{"ast":null,"code":"const server_url = 'http://localhost:63341';\nexport async function fetch_data(rel_url, method) {\n  let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let authorized = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  const url = server_url + rel_url;\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  if (authorized) {\n    const access_token = localStorage.getItem('access_token');\n    if (access_token) {\n      headers['Authorization'] = `Bearer ${access_token}`;\n    } else {\n      throw new Error('Access token not found');\n    }\n  }\n  try {\n    const response = await fetch(url, {\n      method: method,\n      headers: headers,\n      body: body && JSON.stringify(body)\n    });\n    if (!response.ok) {\n      throw new Error(response.status + ': ' + response.statusText);\n    }\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.indexOf('application/json') !== -1) {\n      return await response.json();\n    } else {\n      return await response.text();\n    }\n  } catch (error) {\n    throw new Error(`Failed to fetch ${url}: ${error.message}`);\n  }\n}","map":{"version":3,"names":["server_url","fetch_data","rel_url","method","body","arguments","length","undefined","authorized","url","headers","access_token","localStorage","getItem","Error","response","fetch","JSON","stringify","ok","status","statusText","contentType","get","indexOf","json","text","error","message"],"sources":["/Users/lenka/Documents/Web/Web-technologies/src/utils/fetch_get.tsx"],"sourcesContent":["const server_url = 'http://localhost:63341';\n\nexport async function fetch_data(rel_url: string, method: string, body: any = null, authorized = true) {\n    const url = server_url + rel_url;\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json'\n    };\n  \n    if (authorized) {\n      const access_token = localStorage.getItem('access_token');\n      if (access_token) {\n        headers['Authorization'] = `Bearer ${access_token}`;\n      } else {\n        throw new Error('Access token not found');\n      }\n    }\n  \n    try {\n      const response = await fetch(url, {\n        method: method,\n        headers: headers,\n        body: body && JSON.stringify(body)\n      });\n  \n      if (!response.ok) {\n        throw new Error(response.status + ': ' + response.statusText);\n      }\n  \n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.indexOf('application/json') !== -1) {\n        return await response.json();\n      } else {\n        return await response.text();\n      }\n    } catch (error: any) {\n      throw new Error(`Failed to fetch ${url}: ${error.message}`);\n    }\n  }\n  "],"mappings":"AAAA,MAAMA,UAAU,GAAG,wBAAwB;AAE3C,OAAO,eAAeC,UAAUA,CAACC,OAAe,EAAEC,MAAc,EAAuC;EAAA,IAArCC,IAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAAEG,UAAU,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACjG,MAAMI,GAAG,GAAGT,UAAU,GAAGE,OAAO;EAChC,MAAMQ,OAA+B,GAAG;IACtC,cAAc,EAAE;EAClB,CAAC;EAED,IAAIF,UAAU,EAAE;IACd,MAAMG,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACzD,IAAIF,YAAY,EAAE;MAChBD,OAAO,CAAC,eAAe,CAAC,GAAI,UAASC,YAAa,EAAC;IACrD,CAAC,MAAM;MACL,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;IAC3C;EACF;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAE;MAChCN,MAAM,EAAEA,MAAM;MACdO,OAAO,EAAEA,OAAO;MAChBN,IAAI,EAAEA,IAAI,IAAIa,IAAI,CAACC,SAAS,CAACd,IAAI;IACnC,CAAC,CAAC;IAEF,IAAI,CAACW,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIL,KAAK,CAACC,QAAQ,CAACK,MAAM,GAAG,IAAI,GAAGL,QAAQ,CAACM,UAAU,CAAC;IAC/D;IAEA,MAAMC,WAAW,GAAGP,QAAQ,CAACL,OAAO,CAACa,GAAG,CAAC,cAAc,CAAC;IACxD,IAAID,WAAW,IAAIA,WAAW,CAACE,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE;MACjE,OAAO,MAAMT,QAAQ,CAACU,IAAI,EAAE;IAC9B,CAAC,MAAM;MACL,OAAO,MAAMV,QAAQ,CAACW,IAAI,EAAE;IAC9B;EACF,CAAC,CAAC,OAAOC,KAAU,EAAE;IACnB,MAAM,IAAIb,KAAK,CAAE,mBAAkBL,GAAI,KAAIkB,KAAK,CAACC,OAAQ,EAAC,CAAC;EAC7D;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}